#+Title: Overlays & Flakes
#+Subtitle: Easy ways to override nixpkgs
#+SETUPFILE: ../../reveal.setup

** Problem!

\\

   I want to override a package in nixpkgs, and ship this override to
   other developers or users.

   How?

** Overlays!

\\

   + Provide package changes
   + "Overlayed" onto an existing package source (e.g. ~nixpkgs~)
   + Allow for local, or organisation-wide overrides
   + Implemented as a function

   #+BEGIN_SRC nix
     self: super: {
       htop = self.callPackage ./patches/htop { inherit (super) htop; };
     }
   #+END_SRC

** Overlay structure

\\


   file:imgs/overlays1.png

** Situation: no overlays

\\
   (enjoy some drawings from my eInk tablet)

   file:imgs/overlays2.png

** Situation: one overlay

\\

   file:imgs/overlays3.png

** Situation: two overlays

\\

   file:imgs/overlays4.png

** 

   + ~self~ is sometimes also called ~final~
   + ~super~ is sometimes also called ~prev~

** 

   #+BEGIN_SRC nix
     self: super: {
       htop = builtins.trace "Overriding the htop package" super.htop;
     }
   #+END_SRC

** Overlays to create packages

\\

   Useful for personal or organisation-wide packages.

   #+BEGIN_SRC nix
     self: super: {
       my-hello = self.writeShellScript "my-hello" ''
         ${self.bash}/bin/bash
         ${self.hello}/bin/hello | ${self.cowsay}/bin/cowsay
       '';
     }
   #+END_SRC
   
** 
   
   #+BEGIN_SRC console
      ‚ù§ (theia) ~> tree patches
     patches/
     ‚îî‚îÄ‚îÄ htop
         ‚îú‚îÄ‚îÄ 0001-htop-untruncated-username.patch
         ‚îî‚îÄ‚îÄ default.nix     
   #+END_SRC

   #+BEGIN_SRC nix
     self: super: {
       htop = self.callPackage ./patches/htop { inherit (super) htop; };
     }     
   #+END_SRC

   Quiz: why do we inherit from ~super~ to pass ~htop~?
   
** 

   + Don't define a new package, override parts of the existing one
   + Include as many other depedencies as you need
   + Then include patches, or change build steps

   #+BEGIN_SRC nix
     { htop }:
     htop.overrideAtts ({ patches ? [], ... }: {
       patches = patches ++ [ ./0001-htop-untruncated-username.patch ];
     })
   #+END_SRC

** How do you use an Overlay?

** ~nixpkgs-overlays~ PATH key

\\

   + Required to make ~nix-shell~ use the overlay
   + Means the overlay needs to stick around at runtime
     + and _things break_ if you move/ delete it!

\\

   #+BEGIN_SRC bash
     export NIX_PATH="$NIX_PATH:nixpkgs-overlays=/path/to/overlay"
   #+END_SRC

** Nixpkgs initialisation parameter

\\

   + When loading ~<nixpkgs>~ you can provide various parameters
   + One of them is the ~overlays~ key, which accepts a list
   + Alternatively: define ~load-nixpkgs.nix~, and load that instead

   #+BEGIN_SRC nix
     # load-nixpkgs.nix
     { overlays ? [], ... } @ args:
     import <nixpkgs> (args // {
       overlays = overlays ++ [ (import ./overlay) ];
     });
   #+END_SRC

   #+BEGIN_SRC console
     ‚ù§ (theia) ~> nix build -f load-nixpkgs.nix htop
     ... build the patched htop ...
   #+END_SRC

** In-line example

\\

   Create an in-line overlay to override a certain package

   #+BEGIN_SRC nix
     import <nixpkgs> ({
       overlays = [
         (self: super: {
           htop = builtins.trace "htop in the overlay" super.htop;
         })
       ];
     })
   #+END_SRC

   Quiz: what happens if we select ~self.htop~ ?

** Pinning sources üìå

\\

   How do you currently manage your ~<nixpkgs>~ dependency?

   + ~nix-channel~ :: impure; nixpkgs may change at any time
   + Local nixpkgs checkout :: more or less convenient.  If you are
     going down this route I recommend a git-submodule or git-subtree
   + Flakes :: The hot new shit that everyone is talking about

** Subtree & Submodule

\\

   + Lock a specific configuration state to a particular nixpkgs
     version.
   + Rolling back configuration _also_ rolls back nixpkgs
     automatically.
   + Subtrees _can_ be heavy on a repository, because the entire
     history is merged
     + They do potentially make upstream contributions easier though.

** Flakes

\\

   Flakes allow you to specify your Nix dependencies in a declarative
   way.

   #+BEGIN_SRC nix
     # flake.nix
     {
       inputs = {
         home-manager.url = "github:nix-community/home-manager";
       };
     }
   #+END_SRC

   #+BEGIN_SRC console
     ‚ù§ (theia) ~> nix flake lock --update-input home-manager
   #+END_SRC

** Flakes schema

\\

   #+BEGIN_SRC nix
     {
       inputs = {
         # github example, also supported gitlab:
         nixpkgs.url = "github:Mic92/nixpkgs/master";
         # git urls
         git-example.url = "git+https://git.somehost.tld/user/path";
         # local directories (for absolute paths you can omit 'path:')
         directory-example.url = "path:/path/to/repo";
         # Use this for non-flakes
         bar.url = "github:foo/bar/branch";
         bar.flake = false;
         # Overwrite inputs in a flake
         # This is useful to use the same nixpkgs version in both flakes
         sops-nix.url = "github:Mic92/sops-nix";
         sops-nix.inputs.nixpkgs.follows = "nixpkgs";
         # Pin flakes to a specific revision
         nix-doom-emacs.url = "github:vlaci/nix-doom-emacs?rev=238b18d7b2c8239f676358634bfb32693d3706f3";
         nix-doom-emacs.flake = false;
         # To use a subdirectory of a repo, pass dir=
         nixpkgs.url = "github:foo/bar?dir=shu";
       }
     }
   #+END_SRC

** ‚ö†Ô∏è Flakes are experimental

\\

   + Flakes are still being developed
     + https://github.com/NixOS/rfcs/pull/49 (initial RFC which didn't land)
     + Work ongoing behind ~--experimental-features flake~ argument
     + More RFCS: RFC#123, RFC#105, probably more to come :)
   + https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-flake.html#flake-references
   + I don't use flakes, so I can't give you a lot of insight on it

** Questions?

** [[file:README.org][Back to index]]
