#+Title: Overlays & Flakes
#+Subtitle: Easy ways to override nixpkgs
#+SETUPFILE: ../../reveal.setup

** Problem!

\\

   I want to override a package in nixpkgs, and ship this override to
   other developers or users.

   How?

** Overlays!

\\

   + Provide package changes
   + "Overlayed" onto an existing package source (e.g. ~nixpkgs~)
   + Allow for local, or organisation-wide overrides
   + Implemented as a function

   #+BEGIN_SRC nix
     self: super: {
       htop = self.callPackage ./patches/htop { inherit (super) htop; };
     }
   #+END_SRC

** Overlay structure

\\


   file:imgs/overlays1.png

** Situation: no overlays

\\
   (enjoy some drawings from my eInk tablet)

   file:imgs/overlays2.png

** Situation: one overlay

\\

   file:imgs/overlays3.png

** Situation: two overlays

\\

   file:imgs/overlays4.png

** 

   + ~self~ is sometimes also called ~final~
   + ~super~ is sometimes also called ~prev~

** 

   #+BEGIN_SRC nix
     self: super: {
       htop = builtins.trace "Overriding the htop package" super.htop;
     }
   #+END_SRC

** Overlays to create packages

\\

   Useful for personal or organisation-wide packages.

   #+BEGIN_SRC nix
     self: super: {
       my-hello = self.writeShellScript "my-hello" ''
         ${self.bash}/bin/bash
         ${self.hello}/bin/hello | ${self.cowsay}/bin/cowsay
       '';
     }
   #+END_SRC
   
** 
   
   #+BEGIN_SRC console
      ❤ (theia) s/overlays> tree patches
     patches/
     └── htop
         ├── 0001-htop-untruncated-username.patch
         └── default.nix     
   #+END_SRC

   #+BEGIN_SRC nix
     self: super: {
       htop = self.callPackage ./patches/htop { inherit (super) htop; };
     }     
   #+END_SRC

   Quiz: why do we inherit from ~super~ to pass ~htop~?
   
** 

   + Don't define a new package, override parts of the existing one
   + Include as many other depedencies as you need
   + Then include patches, or change build steps

   #+BEGIN_SRC nix
     { htop }:
     htop.overrideAtts ({ patches ? [], ... }: {
       patches = patches ++ [ ./0001-htop-untruncated-username.patch ];
     })
   #+END_SRC

** How do you use an Overlay?

** ~nixpkgs-overlays~ PATH key

\\

   + Required to make ~nix-shell~ use the overlay
   + Means the overlay needs to stick around at runtime
     + and _things break_ if you move/ delete it!

\\

   #+BEGIN_SRC bash
     export NIX_PATH="$NIX_PATH:nixpkgs-overlays=/path/to/overlay"
   #+END_SRC

** Nixpkgs initialisation parameter

\\

   + When loading ~<nixpkgs>~ you can provide various parameters
   + One of them is the ~overlays~ key, which accepts a list
   + Alternatively: define ~load-nixpkgs.nix~, and load that instead

   #+BEGIN_SRC nix
     # load-nixpkgs.nix
     { overlays ? [], ... } @ args:
     import <nixpkgs> (args // {
       overlays = overlays ++ [ (import ./overlay) ];
     });
   #+END_SRC

   #+BEGIN_SRC console
     ❤ (theia) ~> nix build -f load-nixpkgs.nix htop
     ... build the patched htop ...
   #+END_SRC

** In-line example

\\

   Create an in-line overlay to override a certain package

   #+BEGIN_SRC nix
     import <nixpkgs> ({
       overlays = [
         (self: super: {
           htop = builtins.trace "htop in the overlay" super.htop;
         })
       ];
     })
   #+END_SRC

** [[file:README.org][Back to index]]

