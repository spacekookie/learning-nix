#+Title: Handling build inputs
#+SETUPFILE: ../../reveal.setup

** The world is simple

\\

   There are two platforms in terms of cross-compilation:

   + build :: what system is a build running on
   + host :: what system will the output run on

** 

   Example: cross-compiling from x86_64-darwin to aarch64-linux

   \\
   
   + build: x86_64-darwin
   + host: aarch64-linux

** Dependencies

\\

   In simple terms: ~buildInputs~ are used on "host", ~nativeBuildInputs~
   are used on "build".

\\
   
   + buildInputs :: ~depsHostTarget~
   + nativeBuildInputs :: ~depsBuildHost~

** Tangent: ~strictDeps~

\\

   + Traditionally only ~buildInputs~ existed!
   + This made cross-compilation very hard!

   #+BEGIN_SRC nix
     stdenv.mkDerivation {
       name = "ncdu";

       buildInputs = with pkgs; [ zig ncurses ];

       # ...
     }
   #+END_SRC

   This package will compile!  Everything in ~buildInputs~ is made
   available to the ~$PATH~ of the build environment, as well as the
   final output

** Tangent: ~strictDeps~

\\

   Let's enable ~strictDeps~ and see what happens!

   #+BEGIN_SRC nix
     stdenv.mkDerivation {
       name = "ncdu";

       strictDeps = true;

       buildInputs = with pkgs; [ zig ncurses ];

       # ...
     }
   #+END_SRC

** 

   #+BEGIN_SRC console
     building '/nix/store/w3w3j9l7446jvm227kzag815nrvrj7pl-ncdu.drv'...
     unpacking sources
     unpacking source archive /nix/store/gvrpv8ljmakgi3k7k8pmzidzddvk5avr-source
     source root is source
     patching sources
     configuring
     no configure script, doing nothing
     building
     build flags: SHELL=/nix/store/lj2bdg618093ny9505d0nzzjdq0fwp8a-bash-5.1-p16/bin/bash
     zig build -Drelease-fast
     /nix/store/lj2bdg618093ny9505d0nzzjdq0fwp8a-bash-5.1-p16/bin/bash: line 1: zig: command not found
     make: *** [Makefile:15: release] Error 127
   #+END_SRC

** Getting back to (native)buildInputs

** Basic cross-compilation

\\

   #+BEGIN_SRC nix
     with import <nixpkgs> {
       crossSystem.system = "aarch64-linux";
     };
     stdenv.mkDerivation {
       name = "9menu";
       # ...

       nativeBuildInputs = with pkgsBuildHost; [
         pkg-config meson ninja
       ];
       buildInputs = with pkgsHostTarget.xorg; [ libX11 libXext ];
     }
   #+END_SRC

** About those systems...

** More callPackage magic

\\

   In ~nixpkgs~, when you use ~pkgsCross~, callPackage will splice
   buildInputs and nativeBuildInputs from the correct package sets.

   This is why you don't see usage of ~depsBuildHost~,
   ~depsHostTarget~, etc directly.

** The tri-force

\\

   + ~build~: what computer is the build running on
   + ~host~: what computer will the generated binary run on
   + ~target~: what computer will the generated binary generate
     binaries for

   So: ~target~ is only relevant for programs that themselves produce
   an output, that _can_ be different from the platform that they are
   running on.

** [[./README.org][Back to index]]
