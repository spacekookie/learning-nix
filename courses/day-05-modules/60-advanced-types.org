#+Title: Advanced Types
#+Subtitle: For some type of advanced Nix users
#+SETUPFILE: ../../reveal.setup

** The nixpkgs type system is deep and strange

** Submodules

\\

   + Many NixOS options rely on submodule types
   + Looking at the ~railcar~ virtualisation module as an example

   #+BEGIN_SRC nix
     { pkgs, ... }:
     {
       services.railcar = {
         containers."test-container" = {
           cmd = "${pkgs.hello}/bin/hello";
         };
       };
     }
   #+END_SRC

** Submodules

\\

   + Allow for staticly typed attribute sets
   + Remember the Nixlings examples - typed attribute sets could have
     helped there!
   + Submodules also help generate documentation (in NixOS anyway)
   + Types are implemented as functions in ~lib~

** Three main submodule types

\\

   + *lib.types.submodule* - create basic submodule
   + *lib.types.listOf* - create a list of typed things
   + *lib.types.attrsOf* - create an attrset of typed things

** 

   #+BEGIN_SRC nix
     { lib, ... }:
     {
       options.services.cow-server = {
         enable = lib.mkEnableOption "enable the cow server";
         greeter = lib.mkOption {
           type = lib.types.submodule {
             options = { msg = lib.mkOption { type = lib.types.str; };
                         pkg = lib.mkOption { type = lib.types.package; }; };
           };
         };
       };
     }
   #+END_SRC

** The listOf type

\\

   + Creates a typed list of things
   + Unlike ~[ ]~ this only allows _one type_ of thing
   + Useful for services that can be configured in multiples

** 

   #+BEGIN_SRC nix
     { lib, ... }:
     with lib; # incule lib to cut down on boilerplate
     {
       options.services.cow-server.greeters = {
         type = with types; listOf (submodule {
           options = {
             msg = lib.mkOption {
               type = lib.mkOption { type = lib.types.str; };
               pkg = lib.mkOption { type = lib.types.package; };
             };
           }
         });
         description = "Set of greeters to print messages for";
       };
     }
   #+END_SRC

** Using ~listOf~ modules

   #+BEGIN_SRC nix
     { pkgs, ... }:
     let pkg = pkgs.my-custom-cowsay;
     in
     {
       # ...
       services.cow-server.greeters = [
         { msg = "Hello, Nixlings"; inherit pkg; }
         { msg = "Hello, World!"; inherit pkg; }
       ];
     }
   #+END_SRC

** The attrsOf type

\\

   + Creates a typed attribute set of things
   + Unlike ~{ }~ this only allows _one type_ of thing
   + _Very_ useful for services that can be configured in multiples
     
** 

   #+BEGIN_SRC nix
     { lib, ... }:
     with lib; {
       options.services.cow-server.greeters = {
         type = with types; attrsOf (submodule {
           options = { /* ... */ };
         });
       };
     }
   #+END_SRC

** 

   #+BEGIN_SRC nix
     { pkgs, ... }:
     let pkg = pkgs.my-custom-cowsay;
     in
     {
       # ...
       services.cow-server.greeters = {
         nixlings = { msg = "Hello, Nixlings"; inherit pkg; };
         world = { msg = "Hello, World!"; inherit pkg; };
       };
     }
   #+END_SRC

** You have used ~attrsOf~ already

\\

   + _Many_ modules in NixOS rely on this (for example nginx)
   + 

** [[./README.org][Back to index]]
